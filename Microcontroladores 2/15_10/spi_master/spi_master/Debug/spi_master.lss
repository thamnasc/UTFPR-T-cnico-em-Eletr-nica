
spi_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000865  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  00000a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000327  00000000  00000000  00001171  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000169  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <spi_init>:
#define desativa_SS() (PORTB |= (1<<SS))
#define ativa_SS() (PORTB &= ~(1<<SS))

void spi_init()
{
	DDRSPI = (1<<MOSI) + (1<<SCK) + (1<<SS); //define pinos MOSI, SCK e SS como saida
  80:	8c e2       	ldi	r24, 0x2C	; 44
  82:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE) + (1<<MSTR) + (1<<SPR0); // Habilita interface SPI como master e clock fosc/16
  84:	81 e5       	ldi	r24, 0x51	; 81
  86:	8c bd       	out	0x2c, r24	; 44
  88:	08 95       	ret

0000008a <spi_txrx>:
}

uint8_t spi_txrx(uint8_t data)
{
	SPDR = data; // inicia a transmissao
  8a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); // espera a transmissao terminar
  8c:	0d b4       	in	r0, 0x2d	; 45
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <spi_txrx+0x2>
}
  92:	08 95       	ret

00000094 <main>:

int main()
{
	DDRD=0x0;
  94:	1a b8       	out	0x0a, r1	; 10
	PORTD=0xFF; //habilita pull ups
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8b b9       	out	0x0b, r24	; 11
	uint8_t dado=0b00000001; //inicia setando led 0
	
	spi_init(); //chama a funcao de inicializacao
  9a:	0e 94 40 00 	call	0x80	; 0x80 <spi_init>

int main()
{
	DDRD=0x0;
	PORTD=0xFF; //habilita pull ups
	uint8_t dado=0b00000001; //inicia setando led 0
  9e:	c1 e0       	ldi	r28, 0x01	; 1
	
	spi_init(); //chama a funcao de inicializacao
	
	while(1)
	{
		if (PIND & (1<<VEL))
  a0:	4b 9b       	sbis	0x09, 3	; 9
  a2:	0a c0       	rjmp	.+20     	; 0xb8 <main+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f e3       	ldi	r24, 0x3F	; 63
  a6:	9c e9       	ldi	r25, 0x9C	; 156
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x14>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x1a>
  ae:	00 00       	nop
		{
			_delay_ms(10); //debounce
			SPCR |= (1<<SPI2X); // inicializa interface SPI para velocidade normal
  b0:	8c b5       	in	r24, 0x2c	; 44
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8c bd       	out	0x2c, r24	; 44
  b6:	09 c0       	rjmp	.+18     	; 0xca <main+0x36>
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	9c e9       	ldi	r25, 0x9C	; 156
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x28>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x2e>
  c2:	00 00       	nop
		}
			
		else
		{
			_delay_ms(10); //debounce
			SPCR &=~ (1<<SPI2X); // inicializa interface SPI para dupla velocidade
  c4:	8c b5       	in	r24, 0x2c	; 44
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	8c bd       	out	0x2c, r24	; 44
		}
			
		if (PIND & (1<<DIR))
  ca:	4a 9b       	sbis	0x09, 2	; 9
  cc:	0f c0       	rjmp	.+30     	; 0xec <main+0x58>
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9c e9       	ldi	r25, 0x9C	; 156
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x3e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x44>
  d8:	00 00       	nop
		{
			_delay_ms(10); //debounce
			
			ativa_SS(); // ativa SS para avisar o SLAVE que havera comunicacao
  da:	2a 98       	cbi	0x05, 2	; 5
			spi_txrx(dado); // registrador SPDR recebe dado a ser envia ao slave
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 45 00 	call	0x8a	; 0x8a <spi_txrx>
			desativa_SS(); // desatica SS para indicar que a comunicacao acabou
  e2:	2a 9a       	sbi	0x05, 2	; 5
			
			dado = dado << 1; //desloca o bit, acendendo o proximo led
  e4:	cc 0f       	add	r28, r28
			
			if (dado ==  0x00) //caso chegue no oitavo led da direcao escolhida, volta ao inicio
  e6:	81 f4       	brne	.+32     	; 0x108 <main+0x74>
				dado = 0b00000001;
  e8:	c1 e0       	ldi	r28, 0x01	; 1
  ea:	0e c0       	rjmp	.+28     	; 0x108 <main+0x74>
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x5c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x62>
  f6:	00 00       	nop
		
		else
		{
			_delay_ms(10); //debounce
					
			ativa_SS(); // ativa SS para avisar o SLAVE que havera comunicacao
  f8:	2a 98       	cbi	0x05, 2	; 5
			spi_txrx(dado); // registrador SPDR recebe dado a ser envia ao slave
  fa:	8c 2f       	mov	r24, r28
  fc:	0e 94 45 00 	call	0x8a	; 0x8a <spi_txrx>
			desativa_SS(); // desatica SS para indicar que a comunicacao acabou
 100:	2a 9a       	sbi	0x05, 2	; 5
			
			dado = dado >> 1; //desloca o bit, acendendo o proximo led
 102:	c6 95       	lsr	r28
			
			if (dado == 0b00000000) //caso chegue no oitavo led da direcao escolhida, volta ao inicio
 104:	09 f4       	brne	.+2      	; 0x108 <main+0x74>
				dado =  0b10000000;
 106:	c0 e8       	ldi	r28, 0x80	; 128
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	24 e3       	ldi	r18, 0x34	; 52
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	91 50       	subi	r25, 0x01	; 1
 110:	20 40       	sbci	r18, 0x00	; 0
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x7a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x84>
 118:	00 00       	nop
 11a:	c2 cf       	rjmp	.-124    	; 0xa0 <main+0xc>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
