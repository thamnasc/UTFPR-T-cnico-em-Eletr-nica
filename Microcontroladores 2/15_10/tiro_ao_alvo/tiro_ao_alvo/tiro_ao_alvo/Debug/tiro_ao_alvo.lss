
tiro_ao_alvo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095f  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000728  00000000  00000000  00000d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000466  00000000  00000000  0000143f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018f  00000000  00000000  00001d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  9e:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <twi_init>:
uint8_t twi_getNack()
{
    TWCR = TWI_NACK;
    while(!TWI_RDY);
    return TWDR;
}
  a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  aa:	88 e4       	ldi	r24, 0x48	; 72
  ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  b0:	08 95       	ret

000000b2 <twi_start>:
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 23       	and	r24, r24
  c0:	ec f7       	brge	.-6      	; 0xbc <twi_start+0xa>
  c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c6:	98 7f       	andi	r25, 0xF8	; 248
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	98 30       	cpi	r25, 0x08	; 8
  cc:	09 f4       	brne	.+2      	; 0xd0 <twi_start+0x1e>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	08 95       	ret

000000d2 <twi_stop>:
  d2:	84 e9       	ldi	r24, 0x94	; 148
  d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d8:	ec eb       	ldi	r30, 0xBC	; 188
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	84 fd       	sbrc	r24, 4
  e0:	fd cf       	rjmp	.-6      	; 0xdc <twi_stop+0xa>
  e2:	08 95       	ret

000000e4 <twi_slaveaddr>:
  e4:	88 0f       	add	r24, r24
  e6:	68 0f       	add	r22, r24
  e8:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  ec:	84 e8       	ldi	r24, 0x84	; 132
  ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  f2:	ec eb       	ldi	r30, 0xBC	; 188
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	ec f7       	brge	.-6      	; 0xf6 <twi_slaveaddr+0x12>
  fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 100:	98 7f       	andi	r25, 0xF8	; 248
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	98 31       	cpi	r25, 0x18	; 24
 106:	09 f4       	brne	.+2      	; 0x10a <twi_slaveaddr+0x26>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret

0000010c <twisendData>:
 10c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 110:	84 e8       	ldi	r24, 0x84	; 132
 112:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 116:	ec eb       	ldi	r30, 0xBC	; 188
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 23       	and	r24, r24
 11e:	ec f7       	brge	.-6      	; 0x11a <twisendData+0xe>
 120:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 124:	98 7f       	andi	r25, 0xF8	; 248
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	98 32       	cpi	r25, 0x28	; 40
 12a:	09 f4       	brne	.+2      	; 0x12e <twisendData+0x22>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <configTWI>:

void configTWI ()
{
	twi_start();
 130:	0e 94 59 00 	call	0xb2	; 0xb2 <twi_start>
	twi_slaveaddr(0x20, TWI_WRITE);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <twi_slaveaddr>
	twisendData(~dado);
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 140:	80 95       	com	r24
 142:	0e 94 86 00 	call	0x10c	; 0x10c <twisendData>
	twi_stop();
 146:	0e 94 69 00 	call	0xd2	; 0xd2 <twi_stop>
 14a:	08 95       	ret

0000014c <LEDtroca>:
}

void LEDtroca ()
{
	//if (!(PORTB & (1<<PINB0))) //define meio como LED 5
	if (testBit(PINB, 0)) //define meio como LED 5
 14c:	18 9b       	sbis	0x03, 0	; 3
 14e:	1c c0       	rjmp	.+56     	; 0x188 <LEDtroca+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	9c e9       	ldi	r25, 0x9C	; 156
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LEDtroca+0x8>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LEDtroca+0xe>
 15a:	00 00       	nop
	{
		_delay_ms(10); //debounce
		
		dado = j;
 15c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <j>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
		j = 0xFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <j>
		
		configTWI();
 16a:	0e 94 98 00 	call	0x130	; 0x130 <configTWI>
 16e:	9f ef       	ldi	r25, 0xFF	; 255
 170:	2b e7       	ldi	r18, 0x7B	; 123
 172:	82 e9       	ldi	r24, 0x92	; 146
 174:	91 50       	subi	r25, 0x01	; 1
 176:	20 40       	sbci	r18, 0x00	; 0
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <LEDtroca+0x28>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LEDtroca+0x32>
 17e:	00 00       	nop
		
		_delay_ms(3000); //tempo em que todos os LEDs ficam ligados
		
		j = 0x00;
 180:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <j>
		
		configTWI();
 184:	0e 94 98 00 	call	0x130	; 0x130 <configTWI>
 188:	08 95       	ret

0000018a <main>:
	}
}

int main(void)
{
	DDRB = 0x00;
 18a:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF; //habilita pull up 
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	85 b9       	out	0x05, r24	; 5
    DDRC = (1<<SDA) + (1<<SCL);
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	87 b9       	out	0x07, r24	; 7
	
    twi_init();
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <twi_init>
		{
			dado = j;
			
			configTWI();

			j =~ (1<<i);
 198:	c1 e0       	ldi	r28, 0x01	; 1
 19a:	d0 e0       	ldi	r29, 0x00	; 0
				LEDtroca();
		
			_delay_ms(500);
		}
	
		i = 8;
 19c:	18 e0       	ldi	r17, 0x08	; 8
	
    twi_init();
	
    while (1)
    {
		i = 0;
 19e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		
		for(i;i<8;i++)
		{
			dado = j;
 1a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <j>
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			
			configTWI();
 1aa:	0e 94 98 00 	call	0x130	; 0x130 <configTWI>

			j =~ (1<<i);
 1ae:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 1b2:	ce 01       	movw	r24, r28
 1b4:	02 2e       	mov	r0, r18
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <main+0x32>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <main+0x2e>
 1c0:	80 95       	com	r24
 1c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <j>
			
			if(i==4)
 1c6:	24 30       	cpi	r18, 0x04	; 4
 1c8:	11 f4       	brne	.+4      	; 0x1ce <main+0x44>
				LEDtroca();
 1ca:	0e 94 a6 00 	call	0x14c	; 0x14c <LEDtroca>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	89 e6       	ldi	r24, 0x69	; 105
 1d2:	98 e1       	ldi	r25, 0x18	; 24
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x4a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x54>
 1de:	00 00       	nop
	
    while (1)
    {
		i = 0;
		
		for(i;i<8;i++)
 1e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1ea:	88 30       	cpi	r24, 0x08	; 8
 1ec:	d0 f2       	brcs	.-76     	; 0x1a2 <main+0x18>
 1ee:	2b c0       	rjmp	.+86     	; 0x246 <main+0xbc>
	
		i = 8;
	
		for(i;i>0;i--)
		{
			a = i-1;
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <a>
			
			dado = j;
 1f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <j>
 1fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			
			configTWI();
 1fe:	0e 94 98 00 	call	0x130	; 0x130 <configTWI>
			
			j =~ (1<<a);
 202:	ce 01       	movw	r24, r28
 204:	00 90 03 01 	lds	r0, 0x0103	; 0x800103 <a>
 208:	02 c0       	rjmp	.+4      	; 0x20e <main+0x84>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <main+0x80>
 212:	80 95       	com	r24
 214:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <j>
		
			if(i==5)
 218:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 21c:	85 30       	cpi	r24, 0x05	; 5
 21e:	11 f4       	brne	.+4      	; 0x224 <main+0x9a>
				LEDtroca();
 220:	0e 94 a6 00 	call	0x14c	; 0x14c <LEDtroca>
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	89 e6       	ldi	r24, 0x69	; 105
 228:	98 e1       	ldi	r25, 0x18	; 24
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0xa0>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0xaa>
 234:	00 00       	nop
			_delay_ms(500);
		}
	
		i = 8;
	
		for(i;i>0;i--)
 236:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 240:	81 11       	cpse	r24, r1
 242:	d6 cf       	rjmp	.-84     	; 0x1f0 <main+0x66>
 244:	ac cf       	rjmp	.-168    	; 0x19e <main+0x14>
				LEDtroca();
		
			_delay_ms(500);
		}
	
		i = 8;
 246:	10 93 02 01 	sts	0x0102, r17	; 0x800102 <__data_end>
 24a:	81 2f       	mov	r24, r17
 24c:	d1 cf       	rjmp	.-94     	; 0x1f0 <main+0x66>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
