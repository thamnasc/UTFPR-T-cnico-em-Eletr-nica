
spi_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000012e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006de  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065a  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023c  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034a  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  88:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <spi_txrx>:
	SPCR = (1<<SPE); // Habilita interface SPI como SLAVE
}

uint8_t spi_txrx()
{
	while(!(SPSR & (1<<SPIF))); // espera a transmissao terminar
  90:	0d b4       	in	r0, 0x2d	; 45
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <spi_txrx>
	return SPDR; // retorna o dado recebido
  96:	8e b5       	in	r24, 0x2e	; 46
}
  98:	08 95       	ret

0000009a <main>:

int main()
{
	DDRD=0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a b9       	out	0x0a, r24	; 10
	DDRB=0x00;
  9e:	14 b8       	out	0x04, r1	; 4
	PORTB=0xFF; //habilita os pull ups
  a0:	85 b9       	out	0x05, r24	; 5
	UCSR0B=0x00; //configura para utilizar pinos PD0 e PD1
  a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

uint8_t dado;

void spi_init()
{
	SPCR = (1<<SPE); // Habilita interface SPI como SLAVE
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	8c bd       	out	0x2c, r24	; 44
	
	spi_init(); // inicializa interface SPI
	
	while(1)
	{
		dado=spi_txrx(); // variavel recebe dado do SPDR
  aa:	0e 94 48 00 	call	0x90	; 0x90 <spi_txrx>
  ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		PORTD = dado; //PORTD recebe o valor enviado pelo master
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	fa cf       	rjmp	.-12     	; 0xaa <main+0x10>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
