
elevador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000234  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080011e  0080011e  000002e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098d  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000708  00000000  00000000  00000d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ec  00000000  00000000  0000141d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032b  00000000  00000000  00001c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  9e:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <inicializa_USART>:
#define FALL 2
#define RISE 3

void inicializa_USART()
{
	UCSR0A = 0;
  a6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = (1 << RXEN0) + (1 << TXEN0);
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) + (1 << UCSZ00);
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0H = 0;
  b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 103;
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  c0:	08 95       	ret

000000c2 <mensagem>:
}

char rxch;

void mensagem(char *message)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	int i=0;
	while(*(message+i))
  c6:	fc 01       	movw	r30, r24
  c8:	20 81       	ld	r18, Z
  ca:	22 23       	and	r18, r18
  cc:	69 f0       	breq	.+26     	; 0xe8 <mensagem+0x26>
  ce:	dc 01       	movw	r26, r24
  d0:	11 96       	adiw	r26, 0x01	; 1
	{
		while((UCSR0A & (1 << UDRE0)) ==0);
  d2:	e0 ec       	ldi	r30, 0xC0	; 192
  d4:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=*(message+i);
  d6:	c6 ec       	ldi	r28, 0xC6	; 198
  d8:	d0 e0       	ldi	r29, 0x00	; 0
void mensagem(char *message)
{
	int i=0;
	while(*(message+i))
	{
		while((UCSR0A & (1 << UDRE0)) ==0);
  da:	90 81       	ld	r25, Z
  dc:	95 ff       	sbrs	r25, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <mensagem+0x18>
		UDR0=*(message+i);
  e0:	28 83       	st	Y, r18
char rxch;

void mensagem(char *message)
{
	int i=0;
	while(*(message+i))
  e2:	2d 91       	ld	r18, X+
  e4:	21 11       	cpse	r18, r1
  e6:	f9 cf       	rjmp	.-14     	; 0xda <mensagem+0x18>
	{
		while((UCSR0A & (1 << UDRE0)) ==0);
		UDR0=*(message+i);
		i++;
	}
	while((UCSR0A & (1 << UDRE0)) ==0);
  e8:	e0 ec       	ldi	r30, 0xC0	; 192
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	85 ff       	sbrs	r24, 5
  f0:	fd cf       	rjmp	.-6      	; 0xec <mensagem+0x2a>
	UDR0=10;
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while((UCSR0A & (1 << UDRE0)) ==0);
  f8:	e0 ec       	ldi	r30, 0xC0	; 192
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	85 ff       	sbrs	r24, 5
 100:	fd cf       	rjmp	.-6      	; 0xfc <mensagem+0x3a>
	UDR0=13;
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <main>:

int main(void)
{
	DDRD = (1 << FALL) + (1 << RISE);
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	8a b9       	out	0x0a, r24	; 10
	char andar = '0', input = '0';
	
	inicializa_USART();
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <inicializa_USART>
}

int main(void)
{
	DDRD = (1 << FALL) + (1 << RISE);
	char andar = '0', input = '0';
 116:	10 e3       	ldi	r17, 0x30	; 48
	
	inicializa_USART();
	
	while (1)
	{
		while((UCSR0A & (1 << RXC0))==0);
 118:	c0 ec       	ldi	r28, 0xC0	; 192
 11a:	d0 e0       	ldi	r29, 0x00	; 0
		rxch = UDR0;
 11c:	0f 2e       	mov	r0, r31
 11e:	f6 ec       	ldi	r31, 0xC6	; 198
 120:	ef 2e       	mov	r14, r31
 122:	f1 2c       	mov	r15, r1
 124:	f0 2d       	mov	r31, r0
	
	inicializa_USART();
	
	while (1)
	{
		while((UCSR0A & (1 << RXC0))==0);
 126:	88 81       	ld	r24, Y
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <main+0x18>
		rxch = UDR0;
 12c:	f7 01       	movw	r30, r14
 12e:	80 81       	ld	r24, Z
 130:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
		input = rxch;
		switch (andar)
 134:	11 33       	cpi	r17, 0x31	; 49
 136:	51 f1       	breq	.+84     	; 0x18c <main+0x7e>
 138:	12 33       	cpi	r17, 0x32	; 50
 13a:	09 f4       	brne	.+2      	; 0x13e <main+0x30>
 13c:	42 c0       	rjmp	.+132    	; 0x1c2 <main+0xb4>
 13e:	10 33       	cpi	r17, 0x30	; 48
 140:	09 f0       	breq	.+2      	; 0x144 <main+0x36>
 142:	63 c0       	rjmp	.+198    	; 0x20a <main+0xfc>
		{
			case '0':
			if (input=='0')
 144:	80 33       	cpi	r24, 0x30	; 48
 146:	49 f4       	brne	.+18     	; 0x15a <main+0x4c>
			{
				mensagem("PARADO");
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
				mensagem("0");
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
 158:	60 c0       	rjmp	.+192    	; 0x21a <main+0x10c>
			}
			else if (input=='1')
 15a:	81 33       	cpi	r24, 0x31	; 49
 15c:	39 f4       	brne	.+14     	; 0x16c <main+0x5e>
			{
				setBit(PORTD,RISE);
 15e:	5b 9a       	sbi	0x0b, 3	; 11
				andar = '1';
				mensagem("SUBINDO");
 160:	89 e0       	ldi	r24, 0x09	; 9
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
				mensagem("0");
			}
			else if (input=='1')
			{
				setBit(PORTD,RISE);
				andar = '1';
 168:	11 e3       	ldi	r17, 0x31	; 49
 16a:	57 c0       	rjmp	.+174    	; 0x21a <main+0x10c>
				mensagem("SUBINDO");
			}
			else
			{
				setBit(PORTD,RISE);
 16c:	5b 9a       	sbi	0x0b, 3	; 11
				andar = '2';
				mensagem("SUBINDO");
 16e:	89 e0       	ldi	r24, 0x09	; 9
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	ff ef       	ldi	r31, 0xFF	; 255
 178:	23 ed       	ldi	r18, 0xD3	; 211
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	f1 50       	subi	r31, 0x01	; 1
 17e:	20 40       	sbci	r18, 0x00	; 0
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x6e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x78>
 186:	00 00       	nop
				mensagem("SUBINDO");
			}
			else
			{
				setBit(PORTD,RISE);
				andar = '2';
 188:	12 e3       	ldi	r17, 0x32	; 50
 18a:	47 c0       	rjmp	.+142    	; 0x21a <main+0x10c>
				mensagem("SUBINDO");
				_delay_ms(1000);
			}
			break;
			case '1':
			if (input=='0')
 18c:	80 33       	cpi	r24, 0x30	; 48
 18e:	39 f4       	brne	.+14     	; 0x19e <main+0x90>
			{
				setBit(PORTD,FALL);
 190:	5a 9a       	sbi	0x0b, 2	; 11
				andar = '0';
				mensagem("DESCENDO");
 192:	81 e1       	ldi	r24, 0x11	; 17
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
			break;
			case '1':
			if (input=='0')
			{
				setBit(PORTD,FALL);
				andar = '0';
 19a:	10 e3       	ldi	r17, 0x30	; 48
 19c:	3e c0       	rjmp	.+124    	; 0x21a <main+0x10c>
				mensagem("DESCENDO");
			}
			else if (input=='1')
 19e:	81 33       	cpi	r24, 0x31	; 49
 1a0:	49 f4       	brne	.+18     	; 0x1b4 <main+0xa6>
			{
				mensagem("PARADO");
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
				mensagem("1");
 1aa:	8a e1       	ldi	r24, 0x1A	; 26
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
 1b2:	33 c0       	rjmp	.+102    	; 0x21a <main+0x10c>
			}
			else
			{
				setBit(PORTD,RISE);
 1b4:	5b 9a       	sbi	0x0b, 3	; 11
				andar = '2';
				mensagem("SUBINDO");
 1b6:	89 e0       	ldi	r24, 0x09	; 9
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
				mensagem("1");
			}
			else
			{
				setBit(PORTD,RISE);
				andar = '2';
 1be:	12 e3       	ldi	r17, 0x32	; 50
 1c0:	2c c0       	rjmp	.+88     	; 0x21a <main+0x10c>
				mensagem("SUBINDO");
			}
			break;
			case '2':
			if (input=='0')
 1c2:	80 33       	cpi	r24, 0x30	; 48
 1c4:	81 f4       	brne	.+32     	; 0x1e6 <main+0xd8>
			{
				setBit(PORTD,FALL);
 1c6:	5a 9a       	sbi	0x0b, 2	; 11
				andar = '0';
				mensagem("DESCENDO");
 1c8:	81 e1       	ldi	r24, 0x11	; 17
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
 1d0:	9f ef       	ldi	r25, 0xFF	; 255
 1d2:	e3 ed       	ldi	r30, 0xD3	; 211
 1d4:	f0 e3       	ldi	r31, 0x30	; 48
 1d6:	91 50       	subi	r25, 0x01	; 1
 1d8:	e0 40       	sbci	r30, 0x00	; 0
 1da:	f0 40       	sbci	r31, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <main+0xc8>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0xd2>
 1e0:	00 00       	nop
			break;
			case '2':
			if (input=='0')
			{
				setBit(PORTD,FALL);
				andar = '0';
 1e2:	10 e3       	ldi	r17, 0x30	; 48
 1e4:	1a c0       	rjmp	.+52     	; 0x21a <main+0x10c>
				mensagem("DESCENDO");
				_delay_ms(1000);
			}
			else if (input=='1')
 1e6:	81 33       	cpi	r24, 0x31	; 49
 1e8:	39 f4       	brne	.+14     	; 0x1f8 <main+0xea>
			{
				setBit(PORTD,FALL);
 1ea:	5a 9a       	sbi	0x0b, 2	; 11
				andar = '1';
				mensagem("DESCENDO");
 1ec:	81 e1       	ldi	r24, 0x11	; 17
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
				_delay_ms(1000);
			}
			else if (input=='1')
			{
				setBit(PORTD,FALL);
				andar = '1';
 1f4:	11 e3       	ldi	r17, 0x31	; 49
 1f6:	11 c0       	rjmp	.+34     	; 0x21a <main+0x10c>
				mensagem("DESCENDO");
			}
			else
			{
				mensagem("PARADO");
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
				mensagem("2");
 200:	8c e1       	ldi	r24, 0x1C	; 28
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
 208:	08 c0       	rjmp	.+16     	; 0x21a <main+0x10c>
			}
			break;
			default:
			mensagem("PARADO");
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
			mensagem("0");
 212:	87 e0       	ldi	r24, 0x07	; 7
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 61 00 	call	0xc2	; 0xc2 <mensagem>
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	83 ed       	ldi	r24, 0xD3	; 211
 21e:	90 e3       	ldi	r25, 0x30	; 48
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x112>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x11c>
 22a:	00 00       	nop
			break;
		}
		_delay_ms(1000);
		PORTD = 0;
 22c:	1b b8       	out	0x0b, r1	; 11
	}
 22e:	7b cf       	rjmp	.-266    	; 0x126 <main+0x18>

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
