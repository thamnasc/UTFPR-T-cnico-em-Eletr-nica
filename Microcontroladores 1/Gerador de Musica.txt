// MUSICAS COM O ATMEGA //

#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <util/delay.h>

#define set_bit(Y,bit) (Y|=(1<<bit)) 
#define clear_bit(Y,bit) (Y&=~(1<<bit))
#define som PORTB1 //pino OC1A para sa?da do sinal
#define d_inic 4 //valor inicial de dura??o da nota musical
#define o_inic 5 //valor inicial da oitava
#define b 250 //o nr de batidas indica a velocidade da musica 
#define t_min (7500/b)*10 //tempo m?nimo para formar o tempo base das notas musicais (1/32)

//Indiana Jones - RTTTL - Baixado da internet
const char MUSICA[] PROGMEM ={"e,8p,8f,8g,8p,1c6,8p.,d,8p,8e,1f,p.,g,8p,8a,8b,8p,1f6,p,a,8p,8b,2c6,2d6,2e6,e,8p,8f,8g,8p,1c6,p,d6,8p,8e6,1f.6,g,8p,8g,e.6,8p,d6,8p,8g,e.6,8p,d6,8p,8g,f.6,8p,e6,8p,8d6,2c6"};
//------------------------------------------------------------------------------------
int main()
{
	unsigned int k;
	unsigned char d, o, j, n, i=0;
	DDRB |= (1<<som); //habilita a sa?da de som
	TCCR1A = 1<<COM1A0;//TC1 modo CTC compara??o com OCR1A, prescaler=1
	TCCR1B = (1<<WGM12)|(1<<CS10);
	//------------------------------------------------------------------------------
	//Leitura e execu??o das notas da MUSICA
	
	do
	{
		o = o_inic; //carrega o valor default para a oitava
		if((pgm_read_byte(&MUSICA[i])=='3')&&(pgm_read_byte(&MUSICA[i+1])=='2')){d=32; i+=2;}
		else if((pgm_read_byte(&MUSICA[i])=='1')&&(pgm_read_byte(&MUSICA[i+1])=='6')){d=16;
		i+=2;}
		else if(pgm_read_byte(&MUSICA[i])=='8') {d=8; i++;}
		else if(pgm_read_byte(&MUSICA[i])=='4') {d=4; i++;}
		else if(pgm_read_byte(&MUSICA[i])=='2') {d=2; i++;}
		else if(pgm_read_byte(&MUSICA[i])=='1') {d=1; i++;}
		else d=d_inic; //carrega o valor dafault para a dura??o
		if(pgm_read_byte(&MUSICA[i+1])=='#')
		{
			switch(pgm_read_byte(&MUSICA[i]))//carrega a oitava # default (4a)
			{
				case 'a': OCR1A = 17159; break;//A# - L?#
				case 'c': OCR1A = 14429; break;//C# - D?#
				case 'd': OCR1A = 12852; break;//D# - R?#
				case 'f': OCR1A = 10807; break;//F# - F?#
				case 'g': OCR1A = 9627; break;//G# - S?l#
			}
			i+=2;
		}
		else
		{
			switch(pgm_read_byte(&MUSICA[i]))//carrega a oitava default (4a)
			{
				case 'a': OCR1A = 18181; break;//A - L?
				case 'b': OCR1A = 16197; break;//B - Si
				case 'c': OCR1A = 15287; break;//C - D?
				case 'd': OCR1A = 13618; break;//D - R?
				case 'e': OCR1A = 12131; break;//E - Mi
				case 'f': OCR1A = 11449; break;//F - F?
				case 'g': OCR1A = 10199; break;//G - Sol
				case 'p': clear_bit(TCCR1A,COM1A0); break;//p = pausa
			}
			i++;
		}
		n = 32/d; //tempo de dura??o de cada nota musical
		if(pgm_read_byte(&MUSICA[i])=='.'){n=n+(n/2); i++;}//dura??o 50% >
		if(pgm_read_byte(&MUSICA[i])=='4') { o=4; i++;}
		else if(pgm_read_byte(&MUSICA[i])=='5'){ o=5; i++;}
		else if(pgm_read_byte(&MUSICA[i])=='6'){ o=6; i++;}
		else if(pgm_read_byte(&MUSICA[i])=='7'){ o=7; i++;}
		if(pgm_read_byte(&MUSICA[i])=='.'){n=n+(n/2); i++;}// dura??o 50% >
		switch(o)//troca a oitava se n?o for a default (o = 4)
		{
			case 5: OCR1A = OCR1A>>1; break; //divide por 2
			case 6: OCR1A = OCR1A>>2; break; //divide por 4
			case 7: OCR1A = OCR1A>>4; break; //divide por 8
		}
		//------------------------------------------------------------------------
		for(j=0;j<n;j++)//nr de repeti??es para a nota 1/32
		{
			for(k=t_min;k!=0;k--) _delay_us(100);
		}
		//------------------------------------------------------------------------
		set_bit(TCCR1A,COM1A0); //habilita o som
	}while(pgm_read_byte(&MUSICA[i++])==',');//leitura at? o final da m?sica
	TCCR1A=0; //desabilita o som e o TC1
	TCCR1B=0;
	//-----------------------------------------------------------------------------
	while(1){} //la?o infinito
}
	