#define F_CPU 16000000UL

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h> //define algumas macros para as interrup??es
#include <avr/pgmspace.h>
#include <string.h>

#define setBit(y,bit) (y|=(1<<bit))//coloca em 1 o bit x da vari?vel Y
#define clearBit(y,bit) (y&=~(1<<bit))//coloca em 0 o bit x da vari?vel Y
#define toogleBit(y,bit) (y ^=(1<<bit))//troca o estado l?gico do bit x da vari?vel Y
#define testBit(y,bit) (y&(1<<bit))//retorna 0 ou 1 conforme leitura do bit

#define lcd_D7_port     PORTB                   // lcd D7 connection
#define lcd_D7_bit      PORTB5
#define lcd_D7_ddr      DDRB

#define lcd_D6_port     PORTB                   // lcd D6 connection
#define lcd_D6_bit      PORTB4
#define lcd_D6_ddr      DDRB

#define lcd_D5_port     PORTB                   // lcd D5 connection
#define lcd_D5_bit      PORTB3
#define lcd_D5_ddr      DDRB

#define lcd_D4_port     PORTB                   // lcd D4 connection
#define lcd_D4_bit      PORTB2
#define lcd_D4_ddr      DDRB

#define lcd_E_port      PORTB                   // lcd Enable pin
#define lcd_E_bit       PORTB1
#define lcd_E_ddr       DDRB

#define lcd_RS_port     PORTB                   // lcd Register Select pin
#define lcd_RS_bit      PORTB0
#define lcd_RS_ddr      DDRB

// LCD module information
#define lcd_LineOne     0x00                    // start of line 1
#define lcd_LineTwo     0x40                    // start of line 2

// LCD instructions
#define lcd_Clear           0b00000001          // replace all characters with ASCII 'space'
#define lcd_Home            0b00000010          // return cursor to first position on first line
#define lcd_EntryMode       0b00000110          // shift cursor from left to right on read/write
#define lcd_DisplayOff      0b00001000          // turn display off
#define lcd_DisplayOn       0b00001100          // display on, cursor off, don't blink character
#define lcd_FunctionReset   0b00110000          // reset the LCD
#define lcd_FunctionSet4bit 0b00101000          // 4-bit data, 2-line display, 5 x 7 font
#define lcd_SetCursor       0b10000000          // set cursor position

// Program ID
uint8_t primeira_linha[]   = "  Teclado 4x3  ";
uint8_t segunda_linha[]    = "Tecla: ";
uint8_t tecla[];

// Function Prototypes
void lcd_write_4(uint8_t);
void lcd_write_instruction_4d(uint8_t);
void lcd_write_character_4d(uint8_t);
void lcd_write_string_4d(uint8_t *);
void lcd_init_4d(void);

//fun??o do teclado
unsigned char ler_teclado();

//teclado
const unsigned char teclado[4][3] PROGMEM = {{'1', '2', '3'},
											 {'4', '5', '6'},
											 {'7', '8', '9'},
											 {'*', '0', '#',}};
	
#define LINHA PIND //registrador para a leitura das linhas
#define COLUNA PORTD //registrador para a escrita nas colunas

/******************************* Main Program Code *************************/
int main(void)
{
	unsigned char nr;
	
	DDRD = 0x0F; //defini??es das entradas e sa?das para o teclado
	PORTD= 0xFF; //habilita os pull-ups do PORTD e coloca colunas em 1
	UCSR0B = 0x00; //para uso do PD0 e PD1
	
// configure the microprocessor pins for the data lines
    lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
    lcd_D6_ddr |= (1<<lcd_D6_bit);
    lcd_D5_ddr |= (1<<lcd_D5_bit);
    lcd_D4_ddr |= (1<<lcd_D4_bit);

// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output

// initialize the LCD controller as determined by the defines (LCD instructions)
    lcd_init_4d();                                  // initialize the LCD display for a 4-bit interface

	while(1)
	{
		lcd_init_4d();   
		lcd_write_string_4d(primeira_linha);
		nr = ler_teclado(); //l? constantemente o teclado
		if(nr!=0xFF)//se alguma tecla foi pressionada mostra seu valor
		{
			// set cursor to start of second line
			lcd_write_instruction_4d(lcd_SetCursor | lcd_LineTwo);
			_delay_us(80);                                  // 40 uS delay (min)
			// display the first line of information
			lcd_write_string_4d(segunda_linha);
			tecla[0] = nr;
			lcd_write_string_4d(tecla);
			_delay_ms(3000);	
		}		
	}   
}

void lcd_init_4d(void)
{
// Power-up delay
    _delay_ms(100);                                 // initial 40 mSec delay

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
    _delay_us(200);                                 // this delay is omitted in the data sheet

    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
    _delay_us(80);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
    _delay_us(80);                                  // 40uS delay (min)

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
    _delay_us(80);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
    _delay_us(80);                                  // 40uS delay (min)
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
    _delay_us(80);                                  // 40uS delay (min)
}

void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}

void lcd_write_character_4d(uint8_t theData)
{
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    lcd_write_4(theData);                           // write the upper 4-bits of the data
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
}

void lcd_write_instruction_4d(uint8_t theInstruction)
{
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
}


void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);

    lcd_D5_port &= ~(1<<lcd_D5_bit);
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);

    lcd_D4_port &= ~(1<<lcd_D4_bit);
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}

//Ler teclado
unsigned char ler_teclado()
{
	unsigned char n, j, tecla=0xFF, linha;
	for(n=0;n<3;n++)
	{
		clearBit(COLUNA,n); //apaga o bit da coluna (varredura)
		_delay_ms(10); //atraso para uma varredura mais lenta, tamb?m elimina o Bounce
		linha = LINHA >> 4; //l? o valor das linhas
		for(j=0;j<4;j++) //testa as linhas
		{
			if(!testBit(linha,j))//se foi pressionada alguma tecla,
			{ //decodifica e retorna o valor
				tecla = pgm_read_byte(&teclado[j][n]);
				//while(!tst_bit(LINHA>>4,j));/*para esperar soltar a tecla, caso desejado, descomentar essa linha*/
			}
		}
		setBit(COLUNA,n); //ativa o bit zerado anteriormente
	}
	return tecla; //retorna o valor 0xFF se nenhuma tecla foi pressionada
}